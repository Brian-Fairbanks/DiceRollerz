// Primary colors (#b00020) map to components such as app bars and buttons
// Secondary colors (###D50000) are used as accents on components such as FABs and selection controls.
// Error color ($mdc-theme-error) is used to indicate an error state for components such as text fields provided with inaccurate input.

$mdc-theme-primary: #b00020;
$mdc-theme-secondary: #D50000;
$mdc-theme-error: #1DE9B6;
$mdc-theme-tertiary: #607d8b;

// Theme background ($mdc-theme-background) appears behind scrollable content.
// Surface color ($#ECEFF1) is mapped to the surface of components such as cards, sheets, and menus.
// Note: Dark background or surface colors are not yet supported within MDC Web.

$mdc-theme-surface: bold;
$mdc-theme-on-surface: bold;

// “On-” colors define how text, icons, and strokes are colored in relation to the color on which they appear.
// These are generated automatically to meet accessible color contrast.
// If you are updating these manually, be sure to consider accessible color contrast for the value pairs.

// $mdc-theme-on-primary: #ffffff;
// $mdc-theme-on-secondary: #ffffff;
// $mdc-theme-on-error: $#263238;
// $mdc-theme-background: ##546E7A;



/*  Typography Activity */
// To change your theme's typography, we recommend importing a font from Google Fonts and setting the global font-family https://fonts.google.com. Make sure to include 30, 400, and 500 weights if available. 
@import url('https://fonts.googleapis.com/css?family=Roboto:300,400,500');
$mdc-typography-font-family: unquote('Roboto');



/* Shape Activity */
// The shapes of small, medium, and large components can be themed by overriding the default values.
// We recommend using our shape customization tool to help you pick your radius values. https://material.io/design/shape/about-shape.html#shape-customization-tool
$mdc-shape-small-component-radius: 4px;
$mdc-shape-medium-component-radius: 4px;
$mdc-shape-large-component-radius: 0px;

// Variables
$color-grey: #eee;
$color-grey-light: #f5f5f5;
$color-primary: $primaryColor;
$radius: 3px;

// Function
@function remy($value, $base: 16px) {
    @return ($value / $base) * 1rem;
}

// Mixins
@mixin transition($prop: all, $duration: .25s, $timing: cubic-bezier(.4, 0, 1, 1)) {
    transition: $prop $duration $timing;
}

body {
    line-height: 1.7;
}

.material-icons {
    font-size: 4rem !important;
}

.cards {
    background: #e6e6e6;
}

.cards .row {
    width: 100%;
    max-width: 1280px;
    padding-top: 30px;
    margin-bottom: 0;
}

.cards .row .col:not(:last-child) {
    padding-right: 20px;
}

.cards .card {
    background: transparent;
    box-shadow: 6px 6px 14px 0 rgba(0, 0, 0, 0.2),
        -8px -8px 18px 0 rgba(255, 255, 255, 0.55);
    border-radius: 40px;
    padding: 4px 30px 20px;
    min-height: 380px;
}

.cards.container {
    width: 100%;
    max-width: none;
    padding: 0 20px;
}