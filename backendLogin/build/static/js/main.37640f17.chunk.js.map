{"version":3,"sources":["components/Avatar/index.js","utils/API.js","pages/chatrooms.js","pages/profile.js","stores/userStore.js","pages/Login/inputField.js","pages/Login/submitButton.js","pages/Login/loginForm.js","pages/Login/login.js","App.js","serviceWorker.js","index.js"],"names":["Avatar","props","className","children","AvatarWPic","imagePath","imageHeight","altText","title","text","hRef","key","src","alt","height","Array","isArray","map","line","href","query","axios","get","id","Chatrooms","useState","allChatrooms","setAllChatrooms","posts","body","currentChatroom","setCurrentChatroom","a","API","data","console","log","useEffect","then","room","onClick","getChatLogs","_id","name","post","deleted","App","extendObservable","this","loading","isLoggedIn","username","inputField","type","placeholder","value","onChange","e","target","Component","submitButton","disabled","loginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","setInputValue","doLogin","Login","doLogout","observer","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37640f17.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Avatar (props) {\n    return (\n        <ul className=\"collection\">\n            {props.children}\n        </ul>\n    );\n}\n\nexport function AvatarWPic(props) {\n    const {imagePath, imageHeight, altText, title, text, hRef, key} = props\n\n    return (\n        <li className=\"collection-item avatar\" key={key}>\n            <img src={imagePath} alt={altText} height={imageHeight} className=\"circle\" />\n            <span className=\"title\">{title}</span>\n            <p>{(!Array.isArray(text) ? text : text.map(line => <p>{line}</p>))}</p>\n            <a href={hRef} className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\n        </li>\n    );\n}\n","import axios from \"axios\";\n\nexport default {\n  getChatrooms: function(query) {\n    return axios.get(\"/api/chat\");\n  },\n\n  getChatroom: function(id){\n    return axios.get(\"/api/chat/\"+id);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/API\";\n\nfunction Chatrooms(){\n\n  const [allChatrooms, setAllChatrooms] = useState([\"test\"]);\n  const [currentChatroom, setCurrentChatroom] = useState({posts:[{body:\"No Messages\"}]});\n\n  useEffect(() => {\n    API.getChatrooms()\n    .then( data => {setAllChatrooms(data.data)})\n  }, [])\n\n\n  async function getChatLogs(id){\n    const data = await API.getChatroom(id);\n    console.log(data.data);\n    setCurrentChatroom(data.data);\n  }\n\n\n\n\n  return (\n    <div>\n      list the chatrooms here!\n      <br/>\n      {allChatrooms.map(room => {\n        return (\n          <button onClick={()=> {getChatLogs(room._id)}}>{room.name}</button>\n        )\n      })}\n\n\n      {\"posts\" in currentChatroom ?currentChatroom.posts.map(post => {\n        return (\n          <div>{post.deleted?\"Message has been deleted\":post.body}</div>\n        )\n      }):\"No Messages\"}\n\n    </div>\n  )\n}\n\nexport default Chatrooms;","import React from 'react';\nimport './profile.css';\nimport { Avatar, AvatarWPic } from '../components/Avatar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Avatar>\n        <AvatarWPic\n            imagePath=\"https://static01.nyt.com/images/2018/05/15/arts/01hal-voice1/merlin_135847308_098289a6-90ee-461b-88e2-20920469f96a-superJumbo.jpg?quality=90&auto=webp\"\n            imageHeight=\"50px\"\n            altText=\"Red Dot\"\n            title=\"HAL 9000\"\n            text={[\"I'm sorry, Dave\", \"I'm afraid I can't do that.\"]}\n            href=\"#\"\n            key=\"1\"\n        />\n      </Avatar>\n    </div>\n  );\n}\n\nexport default App;\n","import {extendObservable} from 'mobx';\n\nclass UserStore {\n    constructor() {\n        extendObservable(this, {\n            loading: true,\n            isLoggedIn: false,\n            username: ''\n        })\n    }\n}\n\nexport default new UserStore();","import React, {Component} from 'react';\n\nclass inputField extends Component {\n    render() {\n        return (\n            <div className=\"inputField\">\n                <input\n                className='input'\n                type={this.props.type}\n                placeholder={this.props.placeholder}\n                value={this.props.value}\n                onChange={(e) => this.props.onChange(e.target.value)}>\n                </input>\n            </div>\n        );\n    }\n}\nexport default inputField","import React, {Component} from 'react';\n\nclass submitButton extends Component {\n    render() {\n        return (\n            <div className=\"submitButton\">\n                <button \n                className='btn'\n                disabled={this.props.disabled}\n                onClick={() => this.props.onClick()}\n                >\n                    {this.props.text}\n\n                </button>\n\n            </div>\n        );\n    }\n}\nexport default submitButton","import React, {Component} from 'react';\nimport InputField from './inputField'\nimport SubmitButton from './submitButton';\nimport UserStore from '../../stores/userStore';\n\n\n\nclass loginForm extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            //Disable button while login checks if username and password are correct to prevent double requests to API\n            buttonDisabled: false\n        }\n    }\n\n    //Removing spaces and setting max length to 12 characters for user and pass\n    //Remove line 23 if we want to allow spaces in signup\n    setInputValue(property, val) {\n        val = val.trim();\n        if (val.length > 15) {\n            return;\n        }\n        this.setState({\n            [property]: val\n        })\n    }\n\n    //Method to reset form if user/pass combination is incorrect\n    resetForm() {\n        this.setState({\n            username: '',\n            password: '',\n            buttonDisabled: false\n        })\n    }\n\n    async doLogin() {\n        if (!this.state.username){\n            return;\n        }\n        if (!this.state.password){\n            return;\n        }    \n\n        this.setState({\n            buttonDisabled: true\n        })\n\n        try {\n            let res = await fetch('/login', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                //Sends user and pass input to API to check against our database for a match\n                body: JSON.stringify({\n                    username: this.state.username,\n                    password: this.state.password\n\n\n                })\n            });\n\n            let result = await res.json();\n            if (result && result.success){\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n            \n            }\n            //If user/pass does not match reset form and send alert to user\n            else if (result && result.success === false) {\n                this.resetForm();\n                alert(result.msg);\n            }\n        }\n\n        //If there is an error passing info to API log error to console and reset the form\n        catch(e) {\n            console.log(e);\n            this.resetForm();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"loginForm\">\n                Log In\n                <InputField\n                    type='text'\n                    placeholder='Username'\n                    value={this.state.username ? this.state.username : ''}\n                    onChange={(val) => this.setInputValue('username', val)}>\n                </InputField>\n\n                <InputField\n                    type='password'\n                    placeholder='Password'\n                    value={this.state.password ? this.state.password : ''}\n                    onChange={(val) => this.setInputValue('password', val)}>\n                </InputField>\n\n                <SubmitButton\n                    text='Login'\n                    disabled={this.state.buttonDisabled}\n                    onClick={() => this.doLogin()}\n                    >\n\n                </SubmitButton>\n                \n            </div>\n        );\n    }\n}\nexport default loginForm\n","import React, { Component } from 'react';\nimport UserStore from '../../stores/userStore';\nimport LoginForm from './loginForm';\nimport SubmitButton from './submitButton';\n//import '../../App.css';\nimport { observer } from 'mobx-react';\nimport './login.css';\n\n\n\nclass Login extends Component {\n    //API call goes here\n\n    async componentDidMount() {\n\n        try {\n            let res = await fetch('/isLoggedIn', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            let result = await res.json();\n\n            if (result && result.success) {\n                UserStore.loading = false;\n                UserStore.isLoggedIn = true;\n                UserStore.username = result.username;\n                console.log(\"Login Suceeded\")\n            }\n\n            else {\n                UserStore.loading = false;\n                UserStore.isLoggedIn = false;\n\n            }\n        }\n\n        catch (e) {\n            UserStore.loading = false;\n            UserStore.isLoggedIn = false;\n        }\n        //Note: Might need to add more validation to ensure user is actually logged in.\n    }\n\n    async doLogout() {\n\n        try {\n            let res = await fetch('/logout', {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            });\n\n            let result = await res.json();\n\n            if (result && result.success) {\n                UserStore.isLoggedIn = false;\n                UserStore.username = '';\n\n            }\n\n        }\n\n        catch (e) {\n            console.log(e)\n        }\n    }\n\n    render() {\n\n        if (UserStore.loading) {\n            return (\n                <div className=\"login\">\n                    <div className=\"container\">\n                        Loading your dungeon . . .\n                    </div>\n                </div>\n            );\n        }\n\n        else {\n            if (UserStore.isLoggedIn) {\n                return (\n                    <div className=\"login\">\n                        <div className=\"container\">\n                            Welcome to the party {UserStore.username}!\n\n                            <SubmitButton\n                                text={'Log Out'}\n                                disabled={false}\n                                onClick={() => this.doLogout()}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <div className=\"login\">\n                    <div className=\"container\">\n                       \n                        <LoginForm></LoginForm>\n                    </div>\n\n                </div>\n            );\n        }\n    }\n}\nexport default observer(Login);","import React from 'react';\nimport {Switch, BrowserRouter, Route} from \"react-router-dom\";\nimport './App.css';\nimport { Avatar, AvatarWPic } from './components/Avatar';\nimport Chat from \"./pages/chatrooms\";\nimport Profile from \"./pages/profile\";\nimport Login from \"./pages/Login/login\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <div className=\"teal lighten-2\">\n        <h1>Header - Dice Rollers FTW!</h1>\n      </div>\n\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={[\"/\",\"/login\"]}>\n            <Login></Login>\n          </Route>\n          <Route exact path={\"/chat\"}>\n            <Chat/>\n          </Route>\n          <Route exact path={\"/profile\"}>\n            <Profile/>\n          </Route>\n          \n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// import React from 'react';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1>Dice Rollers FTW!</h1>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}